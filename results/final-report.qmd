---
title: "Analysis of class surveys"
subtitle: "Which courses are most strongly associated with higher programming comfort among students?"
author: "Anna Gornyitzki, Cathy Fang, Johanna Jansen, Joy Chang, Lorretta Lu"
date: October 19, 2025
published-title: "Updated"
editor: visual
format: html
code-copy: true
execute:
  message: false
  warning: false
  echo: false
  cache: true
---

```{r}
# load any other packages and read data here

# loading packages
library(tidyverse)
library(here)
library(tidyverse)
library(MASS)
library(broom)
library(effsize)
library(lsr)
library(ordinal)
library(brant)
library(knitr)

# set folder to where data is saved
folder <- 'data'

# read in csv
logistics <- read_csv(here(folder, 'background-clean.csv'))
```

## Executive summary

In this project, certain university courses were examined to see how closely associated they are with the students' comfort in programming of PSTAT197A. Using survey data from 60 students, the relationship between programming comfort levels (rated 1-5) and course enrollment across several departments was analyzed.

Joy’s portion of the analysis used random forest models to identify and rank the courses most strongly correlated with higher programming comfort. The analysis reveals that CS16, PSTAT 160, and PSTAT 122 are the most important predictors overall. Additionally, we find that this ranking of important courses differs significantly based on a student's prior math proficiency, which will be elaborated in the Findings section.

Lorretta's and Cathy's portion of the analysis used ordinal logistic regression to compare comfort levels between students who had taken versus not taken each course. This approach identified the top five courses that are most strongly linked to higher programming comfort. The findings of this portion of the analysis suggest that introductory computer science and advanced data science courses have the strongest positive associations with programming comfort, highlighting their potential role in improving students' confidence and skill development.

Anna and Johanna used statistical correlation to link course taking to programming comfort. They reported Spearman ρ and mean differences between took and did not take, with bar charts that rank courses and mark significance. Results align with the model based findings that introductory CS and advanced data science courses show the strongest positive associations, while noting these are associations and some courses have small sample sizes.

## Data description

The dataset background-clean.csv contains survey responses from 60 university students aimed at understanding factors associated with programming, statistical, and mathematical comfort and proficiency. Data were collected through a self-reported questionnaire that asked participants to rate their comfort and proficiency with programming, statistics, and mathematics on a five point scale, with 1 being least comfortable and 5 being most comfortable. Additional variables recorded include course enrollment indicators across several departments, most notably Computer Science, Statistics, Linguistics, and Economics. Each course variable is coded as a binary variable, with 1 having taken the course and 0 having not taken the course before. This data set allows for comparative and inferential analyses.

## Questions of interest

The analysis aimed to identify which courses were most strongly associated with students' comfort in programming. Specifically, we addressed the following question:

> 1.  *What are the top five courses that are most correlated with higher self-reported programming comfort among students?*
> 2.  *Does math proficiency influence the ranking of the importance of courses as predictors for programming comfort? (explored using a random forest model)*

## Findings

### Random Forest - Joy

#### RQ1: Overall Course Importance

First, we fit a model using the entire dataset to identify the courses with the strongest overall association with programming comfort. The "feature importance" score from the model measures the strength of this association. The chart below shows the top 10 most important courses.

It is worth noting that while feature importance reveals the strength of the relationship, it does not show the direction (i.e., whether taking the course is linked to higher or lower comfort). Therefore, the top courses shown below are only the most strongly correlated with programming comfort, but they may correlate with a higher or a lower degree of programming comfort. Despite this shortcoming, the feature importance of the random forest model has an advantage in being able to measure a predictor’s importance holistically, in the context of all other predictors. Unlike a simple correlation, which assesses only the isolated, bivariate linear relationship, the random forest's non-linear structure accounts for interaction effects. This means the importance score of a course already reflects its conditional value, or how its contribution to programming comfort changes based on the presence or absence of other courses.

The top courses most strongly associated with programming comfort are CS 16, PSTAT 160, PSTAT 122, PSTAT 100, and PSTAT 131, which is reasonable since all of these courses except for 160 are programming-based. It is natural that the students who have taken these courses are more or less comfortable with programming, depending on their performance in and feelings for these courses.

| Course   | Importance |
|:---------|-----------:|
| CS16     |   0.133585 |
| PSTAT160 |   0.108485 |
| PSTAT122 |  0.0963313 |
| PSTAT100 |  0.0855638 |
| PSTAT131 |  0.0854055 |

![](random_forest_course_ranking.png)

#### RQ2: The Influence of Math Proficiency

To determine if the importance of courses changes based on a student's background, we split the dataset into three groups: those with 'advanced' math proficiency, those with 'intermediate' proficiency, and those with 'beginner' proficiency.

We then ran the Random Forest analysis separately for each group. The subgroup whose math proficiency is 'beginner' is too small (n=3) to perform an analysis, so only the ‘advanced’ and ‘intermediate’ groups are kept and analyzed.

The comparison table below clearly shows how the ranking of the importance of courses as predictors for programming comfort changes when we take math proficiency into consideration. We can observe that CS 16, PSTAT 100, PSTAT 122, and PSTAT 160 remain the strongest predictors as in the overall course importance analysis. Their rankings change slightly - for example, PSTAT 100 becomes the most strongly correlated predictor for the group with intermediate math proficiency. Additionally, PSTAT 134, PSTAT 174, and CS 9 are included as the top predictors. These changes can be explained by the different learning paths for each group. For the 'Math Intermediate' students, foundational courses like PSTAT 100 and CS 9 are among the top predictors, as these courses establish the statistical and programming logic. Conversely, the 'Math Advanced' group, which already has this foundation, is more influenced by specialized, high-level courses like PSTAT 134 and PSTAT 174, although the foundational courses like CS 16 and PSTAT 122 are still highly important to them. This suggests that for advanced students, programming comfort is driven by applying their quantitative skills to more specific problems.

| Rank | Course (adv) | Importance (adv) | Course (int) | Importance (int) |
|-----:|:-------------|-----------------:|:-------------|-----------------:|
|    1 | CS16         |         0.157618 | PSTAT100     |         0.144121 |
|    2 | PSTAT122     |        0.0982008 | CS16         |         0.138668 |
|    3 | PSTAT134     |        0.0944759 | CS9          |         0.103457 |
|    4 | PSTAT174     |        0.0862864 | PSTAT122     |        0.0978085 |
|    5 | PSTAT160     |        0.0859582 | PSTAT160     |        0.0905109 |

### Statistical Correlation Scores - Anna and Johanna

We computed Spearman correlation, a rank-based statistic that measures how strongly two variables move together in a monotonic pattern. In this context, it shows whether students who took certain courses tend to report higher programming comfort on a scale from 1 to 5.

```{r}
course_cols <- c("PSTAT100","PSTAT115","PSTAT120","PSTAT122","PSTAT126","PSTAT131",
"PSTAT160","PSTAT174","CS9","CS16","LING104","LING110","LING111",
"CS130","CS165","ECON145","PSTAT127","PSTAT134","CS5")

corr_df <- logistics %>%
dplyr::select(prog.comf, dplyr::all_of(course_cols)) %>%
mutate(across(everything(), ~ suppressWarnings(as.numeric(as.character(.))))) %>%
drop_na()

prog <- corr_df$prog.comf
spearman_vec <- sapply(corr_df[course_cols], function(x) {
ok <- complete.cases(x, prog)
cor(x[ok], prog[ok], method = "spearman")
})

spearman_sorted <- sort(spearman_vec, decreasing = TRUE)
cor_table <- tibble(
course = names(spearman_sorted),
spearman_rho = as.numeric(spearman_sorted)
)
```

After converting each course variable into a binary indicator (1 = took, 0 = did not take), we calculated the Spearman correlation between each course and programming comfort while removing any missing responses. The correlations were sorted from highest to lowest to identify which courses were most strongly associated with higher comfort. We then visualized the results in a bar chart to highlight these relationships.

```{r}
library(ggplot2)

ggplot(cor_table, aes(x = reorder(course, spearman_rho), y = spearman_rho)) +
geom_col(fill = "steelblue") +
coord_flip() +
labs(
title = "Class correlations with programming comfort",
x = "Course",
y = "Spearman rho"
) +
theme_minimal(base_size = 11)

```

```{r}
knitr::kable(head(cor_table, 5),
caption = "Top five courses by Spearman rho with programming comfort",
digits = 3)
```

The results show that CS16, CS130, PSTAT134, PSTAT127, and LING111 are among the courses most positively correlated with programming comfort. This suggests that both introductory computer science courses and upper-division data science or linguistics courses may contribute to greater programming confidence. However, since correlation measures association rather than causation, these results should be interpreted as patterns rather than proof of direct influence.

### Logistic Regression - Cathy and Lorretta

We applied the Ordinal Logistics Model, which is also called the Cumulative Link Model, using the clm function. The simple logistics regression model can only be applied to binary data. However, the response variable of programming comfort was recorded as 1 to 5. Thus, the prog.comf was treated as an ordered categorical variable with five levels.

This clm function estimated the log-odds of a student being in a higher comfort category rather than a lower one. The model used a logit link function and maximum-likelihood estimation to obtain coefficient estimates for each course and threshold cut-points separating the ordered categories. Positive coefficients indicated courses associated with greater odds of higher programming comfort, while negative coefficients indicate courses associated with lower comfort levels. After that, the estimates of all courses were ranked from the highest to the lowest.

```{r}
#| echo: true
#| 
# Make sure outcome is ordered factor
logistics <- logistics %>%
  mutate(prog.comf = ordered(prog.comf, levels = c(1, 2, 3, 4, 5)))

# Use all courses (keep everything)
predictors <- c("PSTAT100","PSTAT115","PSTAT120","PSTAT122","PSTAT126","PSTAT131",
                "PSTAT160","PSTAT174","CS9","CS16","LING104","LING110","LING111",
                "CS130","CS165","ECON145","PSTAT127","PSTAT134","CS5")

# Keep only outcome + predictors, drop missing rows
logistics <- logistics %>%
  dplyr::select(prog.comf, all_of(predictors)) %>%
  drop_na()

# Fit Ordinal Logistic Model
formula <- as.formula(paste("prog.comf ~", paste(predictors, collapse = " + ")))
model_clm <- clm(formula, data = logistics, link = "logit")

summary(model_clm)

# Rank Step
coefs <- summary(model_clm)$coefficients

# Remove threshold rows like "1|2", "2|3", etc.
coefs <- coefs[!grepl("\\|", rownames(coefs)), , drop = FALSE]

# Create a simple ranked table
ranked_courses <- data.frame(
  Course = rownames(coefs),
  Estimate = coefs[, "Estimate"],
  StdError = coefs[, "Std. Error"]
)

# Sort by absolute coefficient (strongest effects first)
ranked_courses <- ranked_courses[order(ranked_courses$Estimate, decreasing = TRUE), ]

# Print results
print(ranked_courses)
```

```{r}
kable(head(ranked_courses, 5),
      caption = "Ordinal Logistic Regression Results by Course",
      digits = 3,
      row.names = FALSE)
```

```{r}
library(ggplot2)

# Remove rows with NA
ranked_courses_plot <- ranked_courses %>%
  filter(!is.na(Estimate))

# Plot bar chart
ggplot(ranked_courses_plot, aes(x = reorder(Course, Estimate), y = Estimate, fill = Estimate > 0)) +
  geom_col() +
  coord_flip() +
  labs(title = "Course Effects on Programming Comfort",
       x = "Course",
       y = "Estimates") +
  scale_fill_manual(values = c("red", "steelblue"), guide = FALSE) +
  theme_minimal(base_size = 11)
```

According to the figure and table, the top five courses that mostly correlated to the programming comfort were CS 16, PSTAT 127, PSTAT 134, PSTAT 120, and PSTAT 100.

In particular, CS16 and PSTAT127 emerged as the most influential predictors with estimates of 3.381 and 3.176 respectively. It suggests that foundational computer science and data science

Using ordinal logistics regression, course enrollment patterns were examined to test how they may affect students' self-reported programming comfort on a 1-5 scale. Among all courses, it appears CS 16, PSTAT 127, PSTAT 134, PSTAT 120, and PSTAT 100. This suggests that students that complete these courses are substantially more likely to report higher comfort levels in programming.

## Conclusion

Across random forest, ordinal logistic regression, and Spearman correlation, the results agree that introductory computer science and advanced statistics or data science courses are most strongly associated with higher programming comfort, with CS16 appearing near the top in every approach and courses such as PSTAT122, PSTAT127, PSTAT134, and PSTAT160 also showing strong positive links. Differences in exact rankings are because random forests emphasize joint predictive power and capture nonlinear interactions, ordinal logistic regression estimates each course’s directional effect while adjusting for the others, and Spearman correlation reports the simple pairwise association between a single course and comfort. Viewed together, these complementary approaches point to the same takeaway that foundational programming and applied data courses are key experiences linked to greater confidence in programming.
